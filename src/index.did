type Comment = record {
  id : text;
  created : nat64;
  authorId : text;
  authorName : text;
  lastUpdate : opt nat64;
  quoteId : text;
  comment : text;
};
type CommentPayload = record {
  authorId : text;
  authorName : text;
  quoteId : text;
  comment : text;
};
type CommentsToDisplay = record { author : text; comment : text };
type NewQuotePayload = record { authorId : text; quote : text; author : text };
type NewUserPayload = record { name : text; pinCode : text };
type Quote = record {
  id : text;
  created : nat64;
  authorId : text;
  lastUpdate : opt nat64;
  quote : text;
  author : text;
};
type QuoteToDisplay = record { id : text; quote : text; author : text };
type User = record {
  id : text;
  created : nat64;
  name : text;
  lastUpdate : opt nat64;
  pinCode : text;
};
type _AzleResult = variant { Ok : Comment; Err : text };
type _AzleResult_1 = variant { Ok : Quote; Err : text };
type _AzleResult_2 = variant { Ok : User; Err : text };
type _AzleResult_3 = variant { Ok : vec QuoteToDisplay; Err : text };
type _AzleResult_4 = variant { Ok : vec CommentsToDisplay; Err : text };
service : () -> {
  addComment : (CommentPayload) -> (_AzleResult);
  deleteComment : (text, text, text) -> (_AzleResult);
  deleteQuote : (text, text) -> (_AzleResult_1);
  deleteUser : (text) -> (_AzleResult_2);
  getAllQuotes : () -> (_AzleResult_3) query;
  getMyUserData : (NewUserPayload) -> (_AzleResult_2) query;
  getQuoteComments : (text) -> (_AzleResult_4) query;
  newQuote : (NewQuotePayload) -> (_AzleResult_1);
  newUser : (NewUserPayload) -> (_AzleResult_2);
}